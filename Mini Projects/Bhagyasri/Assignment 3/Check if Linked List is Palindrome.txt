//{ Driver Code Starts
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <stack>
using namespace std;
/* Link list Node */
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};




// } Driver Code Ends
/*
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

class Solution {
public:
    // Function to check whether the list is a palindrome.
    bool isPalindrome(Node *head) {
        if (!head || !head->next) {
            // An empty list or a list with a single node is a palindrome.
            return true;
        }

        // Find the middle of the linked list using the slow and fast pointers.
        Node *slow = head;
        Node *fast = head;
        while (fast && fast->next) {
            slow = slow->next;
            fast = fast->next->next;
        }

        // Reverse the second half of the linked list.
        Node *secondHalf = reverseLinkedList(slow);

        // Compare the first half and the reversed second half of the linked list.
        while (secondHalf) {
            if (head->data != secondHalf->data) {
                return false;
            }
            head = head->next;
            secondHalf = secondHalf->next;
        }

        return true;
    }

private:
    // Function to reverse a linked list.
    Node* reverseLinkedList(Node* head) {
        Node *prev = nullptr;
        Node *current = head;
        while (current) {
            Node *next = current->next;
            current->next = prev;
            prev = current;
            current = next;
        }
        return prev;
    }
};




//{ Driver Code Starts.
/* Driver program to test above function*/
int main()
{
  int T,i,n,l,firstdata;
    cin>>T;
    while(T--)
    {
        
        struct Node *head = NULL,  *tail = NULL;
        cin>>n;
        // taking first data of LL
        cin>>firstdata;
        head = new Node(firstdata);
        tail = head;
        // taking remaining data of LL
        for(i=1;i<n;i++)
        {
            cin>>l;
            tail->next = new Node(l);
            tail = tail->next;
        }
    Solution obj;
   	cout<<obj.isPalindrome(head)<<endl;
    }
    return 0;
}


// } Driver Code Ends
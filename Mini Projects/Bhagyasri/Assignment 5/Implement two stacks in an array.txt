//{ Driver Code Starts
#include<bits/stdc++.h>

using namespace std;


// } Driver Code Ends


#include <iostream>

class twoStacks
{
    int *arr;
    int size;
    int top1, top2;
public:
    twoStacks(int n = 100)
    {
        size = n;
        arr = new int[n];
        top1 = -1;
        top2 = n; // Initialize top2 to n (not size)
    }

    // Function to push an integer into stack1.
    void push1(int x)
    {
        if (top1 < top2 - 1) // Check if there is space in the array
            arr[++top1] = x;
        else
            std::cout << "Stack Overflow for Stack1\n";
    }

    // Function to push an integer into stack2.
    void push2(int x)
    {
        if (top1 < top2 - 1) // Check if there is space in the array
            arr[--top2] = x;
        else
            std::cout << "Stack Overflow for Stack2\n";
    }

    // Function to remove an element from the top of stack1.
    int pop1()
    {
        if (top1 >= 0)
            return arr[top1--];
        else
        {
            //std::cout << "Stack1 is Empty\n";
            return -1; // Return a value to indicate underflow
        }
    }

    // Function to remove an element from the top of stack2.
    int pop2()
    {
        if (top2 < size)
            return arr[top2++];
        else
        {
           // std::cout << "Stack2 is Empty\n";
            return -1; // Return a value to indicate underflow
        }
    }
};





//{ Driver Code Starts.

int main()
{

    int T;
    cin>>T;
    while(T--)
    {
        twoStacks *sq = new twoStacks();

        int Q;
        cin>>Q;
        while(Q--){
        int stack_no;
        cin>>stack_no;
        int QueryType=0;
        cin>>QueryType;
        
        if(QueryType==1)
        {
            int a;
            cin>>a;
            if(stack_no ==1)
            sq->push1(a);
            else if(stack_no==2)
            sq->push2(a);
        }else if(QueryType==2){
        	if(stack_no==1)
            cout<<sq->pop1()<<" ";
            else if(stack_no==2)
            cout<<sq->pop2()<<" ";

        }
        }
        cout<<endl;
    }
}

// } Driver Code Ends